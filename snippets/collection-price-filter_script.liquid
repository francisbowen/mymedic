{%- assign pageurl_params = content_for_header | split:'"pageurl":"' | last | split:'"' | first | split: '?' | last -%}

<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

<script>
  {%- assign price_min_max = collection.products | sort: 'price' -%}
  var min_price = {{ price_min_max[0].price }};
  var max_price = {{ price_min_max[-1].price }};
  var url_params;

  $.ajax({ url: '{{ collection.url | sort_by: 'price-ascending' | append: '&layout=price_get' }}',
    dataType: 'html', 
    success: function(data) {
      min_price = $.trim(data);
      createSlider(min_price, max_price);
    },
    error: function(data){
      console.log(data);
    }
  });

  $.ajax({ url: '{{ collection.url | sort_by: 'price-descending' | append: '&layout=price_get' }}',
    dataType: 'html', 
    success: function(data) {     
      max_price = $.trim(data);
      createSlider(min_price, max_price);
    }, 
    error: function(data){
      console.log(data);
    }
  });
  
  function getRandomNumber() {
    var min = 1,
        max = 9,
        random;
    do {
      random = Math.floor(Math.random() * (max - min)) + min;
    } while (random === getRandomNumber.last);
    getRandomNumber.last = random;
    return random;
  };


  function update_url(params){
      params = params.replace('??','?');
      window.history.pushState("data","Title",'{{collection.url}}'+ params);
    }

  function update_result_product_range (filter_params, curr_page) {
    if($('#slider-range').slider('instance') != undefined){
      $('#slider-range').slider('disable');
    }
    var pagination = '',
        needs_filters = filter_params == '' ? '' : '?',
        needs_sort = '',
        sort_only = ''{% if collection.sort_by != blank %},
        needs_sort = 'sort_by={{ collection.sort_by }}',
        sort_only = filter_params == '' ? '?' : '&'{% endif %};
    if(curr_page !== undefined) {
      pagination = '&page='+ curr_page
    } else {
      $('.grid--view-items').html('');
      url_params = needs_filters + filter_params + sort_only + needs_sort;
      update_url(url_params);
      curr_page = 1
    }
    $.ajax({ url: '{{collection.url}}?'+ filter_params +'&sort_by={% if collection.sort_by != '' %}{{ collection.sort_by }}{% else %}custom'+ getRandomNumber() +'{% endif %}&layout=none'+ pagination,
      dataType: 'html', 
      success: function(response) {
        var response_pagination = parseInt($($.parseHTML(response)).filter("#total_pages").text()),
            response_products = $($.parseHTML(response)).filter("#filter_results").html();
        $('.grid--view-items').append(response_products);
        if(curr_page < response_pagination) {
          curr_page++;
          update_result_product_range (filter_params, curr_page)
        } else if (curr_page == response_pagination) {
          if($('#slider-range').slider('instance') != undefined){
            $('#slider-range').slider('enable');
          }
        }
      }, 
      error: function(data){
        console.log(data);
      }
    });
    product_grid_swatch_init();
    update_filter_buttons(filter_params, curr_page);
  }

  function update_filter_buttons(filter_params, curr_page) {

    if (curr_page > 1)
      return;

    $('.current_filter_btn').remove();

    if (filter_params == '')
      return;

    console.log('filter_params = ', filter_params);

    var filters = filter_params.split("&");
    for (var i=0; i< filters.length; i++) {
      if (filters[i] == '')
        continue;

      var values = filters[i].split('=');
      var filter_name = values[0];
      
      var filter_values = values[1].split('+');
      for (var j = 0; j < filter_values.length; j++) {
        var filter_value = filter_values[j].toLowerCase();

        if ($(`.current_filter_btn[data-option-name='${filter_value}']`).length > 0)
          continue;

        $(`#${filter_value}`).prop('checked', true);

        if (filter_name == 'prices') {
          var button_label = filter_value;
        }
        else {
          var button_label = filter_values[j].split('_')[1];
        }

        var btn_value = `<label for class="current_filter_btn" data-filter-name="${filter_name}" data-option-name="${filter_value}">${filter_name}: ${button_label}</label>`;
        
        if ($('.current_filter_btn.clear_btn').length == 0) {
          $('.sidebar-filter.current_filter .option_buttons').append(btn_value);
        } else {
          $('.current_filter_btn.clear_btn').before(btn_value);
        }
      }
    }

    if (filters.length > 0) {
      if ($('.current_filter_btn.clear_btn').length == 0) {
        $('.sidebar-filter.current_filter .option_buttons').append('<label for class="current_filter_btn clear_btn">Clear all</label>');
      }
    }

    initClearAllbtn();
  }
      
  function replaceUrlParam(url, paramName, paramValue){
      if (paramValue == null) {
        paramValue = '';
      }
      var pattern = new RegExp('\\b('+paramName+'=).*?(&|#|$)');
      if (url.search(pattern)>=0) {
        return url.replace(pattern,'$1' + paramValue + '$2');
      }
      url = url.replace(/[?#]$/,'');
      return url + (url.indexOf('?')>0 ? '&' : '?') + paramName + '=' + paramValue;
  }

  function createSlider(min_price, max_price) {
    var min_price_setting = min_price == '0' ? min_price : min_price/100,
        max_price_setting = max_price == '0' ? max_price : max_price/100;

    console.log('min_price',min_price_setting);
    console.log('max_price',max_price_setting);
    
    $('#slider-range').slider({
      range: true,
      min: 0,
      max: Math.ceil(max_price_setting),
      step: 1,
      values: [min_price_setting, max_price_setting],
      stop: function( event, ui ){
        var price_range = parseInt(ui.values[0]) +'-'+ parseInt(ui.values[1]),
            price_param = 'prices='+ price_range;
        console.log('ui.values[1]',ui.values[1]);
        console.log('price_param',price_param);
        if (typeof url_params !== 'undefined') {
          console.log('not undefined');
          if (~url_params.indexOf('prices=')) {
            price_param = replaceUrlParam(url_params, 'prices', price_range).replace('?','');
            console.log('has index');
          } else {
            price_param = url_params +'&'+ price_param;
            console.log('does not have index');
          }
        }
        update_result_product_range(price_param);
      },
      slide: function(event, ui) {
        // Update the range container values upon sliding
        $('.range').html('<span class="range-value"><sup>$</sup>' + ui.values[0].toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + '</span><span class="range-divider"></span><span class="range-value"><sup>$</sup>' + ui.values[1].toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + '</span>');

        // Get old value
        var previousVal = parseInt($(this).data('value'));

        // Save new value
        $(this).data({
          'value': parseInt(ui.value)
        });    

        if (ui.values[1] > max_price) {
          if (!$('.range-alert').hasClass('active')) {
            $('.range-alert').addClass('active');
          }
        } else {
          if ($('.range-alert').hasClass('active')) {
            $('.range-alert').removeClass('active');
          }
        }
      }
    });
    
    var min_html = Shopify.formatMoney(min_price, '{{ shop.money_with_currency_format }}'),
        max_html = Shopify.formatMoney(max_price, '{{ shop.money_with_currency_format }}')

    $('.collection_price_filter .max_value').html('<sup>' + max_html.slice(0, 1) + '</sup>' + parseInt(max_html.slice(1, -3).replace(/,/g, '')));

    // Apply initial values to the range container
    $('.range').html('<span class="range-value"><sup>$</sup>' + $('#slider-range').slider("values", 0).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + '</span><span class="range-divider"></span><span class="range-value"><sup>$</sup>' + $("#slider-range").slider("values", 1).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + '</span>');

    // Show the gears on press of the handles
    $('.ui-slider-handle, .ui-slider-range').on('mousedown', function() {
      $('.gear-large').addClass('active');
    });

    // Hide the gears when the mouse is released
    // Done on document just incase the user hovers off of the handle
    $(document).on('mouseup', function() {
      if ($('.gear-large').hasClass('active')) {
        $('.gear-large').removeClass('active');
      }
    });

    // Rotate the gears
    var gearOneAngle = 0,
      gearTwoAngle = 0,
      rangeWidth = $('.ui-slider-range').css('width');

    $('.gear-one').css('transform', 'rotate(' + gearOneAngle + 'deg)');
    $('.gear-two').css('transform', 'rotate(' + gearTwoAngle + 'deg)');

    // Prevent the range container from moving the slider
    $('.range, .range-alert').on('mousedown', function(event) {
      event.stopPropagation();
    });
  }
    
  $(document).ready(function(){
    if (typeof price_range !== 'undefined') {
      $('#slider-range').on('slidecreate', function( event, ui ) {
        setTimeout(function(){
          $('#slider-range').slider('option', 'values', [parseInt(price_range.split('-')[0]), parseInt(price_range.split('-')[1])]);
          $('.range').html('<span class="range-value"><sup>$</sup>' + price_range.split('-')[0] + '</span><span class="range-divider"></span><span class="range-value"><sup>$</sup>' + price_range.split('-')[1] + '</span>');
        },500);
      });
    }
    if (typeof window.location.search.substring(1) !== 'undefined') {
      url_params = window.location.search.substring(1);
      console.log(url_params);
      update_result_product_range(url_params)
    }
    initClearAllbtn();
  });

  function initClearAllbtn() {
    $('.current_filter_btn.clear_btn').click(function() {
      console.log('clear button clicked');
      update_result_product_range('');
      $(`.option_buttons .filter-element input`).prop('checked', false);
      resetPriceSlider();
    });
  }

  function resetPriceSlider() {
    createSlider(min_price, max_price);
  }
</script>
